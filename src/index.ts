// src/index.ts
import { loadConfig, type Config } from './config/env.js';
import { logApp, TIMEZONE } from './lib/logger.js';
import { getWeatherCached } from './lib/weather.js';
import { generateMessage } from './lib/messages.js';
import { initTelegram, updateBio } from './lib/telegram.js';
import { formatStamp } from './lib/time.js';
import type { TelegramClient } from 'telegram';

function truncateWithEllipsis(str: string, maxLen: number): string {
  if (str.length <= maxLen) return str;
  return str.slice(0, Math.max(0, maxLen - 1)) + '‚Ä¶';
}

async function buildBio(config: Config): Promise<string> {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É
  const message = generateMessage(config.TARGET_DATE);
  const weather = await getWeatherCached(config);
  let bio = `${message} | ${weather}`;
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
  if (bio.length > config.bioMaxLength) {
    const reserve = ` | ${weather}`.length;
    bio = truncateWithEllipsis(message, config.bioMaxLength - reserve) + ` | ${weather}`;
  }
  return bio;
}

async function run() {
  try {
    const config: Config = loadConfig();
    logApp(`üöÄ –°—Ç–∞—Ä—Ç –±–æ—Ç–∞. –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${TIMEZONE}. –í—Ä–µ–º—è: ${formatStamp()}`);

    const client: TelegramClient = await initTelegram(config);

    const refresh = async () => {
      try {
        const bio = await buildBio(config);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º retry –∫–æ–Ω—Ñ–∏–≥ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ config
        await updateBio(client, bio, config.retry);
      } catch (err) {
        logApp(`üö® –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è bio: ${(err as Error).stack || (err as Error).message}`);
      }
    };

    // –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –¥–∞–ª–µ–µ –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—É
    await refresh();
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    const timer = setInterval(refresh, config.UPDATE_INTERVAL_MS);

    const shutdown = async (sig: string) => {
      logApp(`üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${sig}, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É‚Ä¶`);
      clearInterval(timer);
      try {
        await client.disconnect();
      } catch {}
      process.exit(0);
    };
    ['SIGINT', 'SIGTERM'].forEach((sig) => process.on(sig, () => shutdown(sig)));
  } catch (err) {
    logApp(`üö® –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${(err as Error).stack || (err as Error).message}`);
    process.exit(1);
  }
}

run();