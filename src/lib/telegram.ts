// src/lib/telegram.ts
import { Api, TelegramClient } from 'telegram';
import { StringSession } from 'telegram/sessions/index.js';
import readline from 'readline';
import fs from 'fs';
import { logApp } from './logger.js';
import { withRetries } from './retry.js';
import type { Config } from '../config/env.js';

function createRl() {
  return readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });
}
const ask = (rl: readline.Interface, q: string) =>
  new Promise<string>((r) => rl.question(q, r));

function parseFloodWait(err: any) {
  const msg = `${err?.message || ''}`;
  const m = msg.match(/FLOOD_WAIT_(\d+)/);
  if (m) return parseInt(m[1], 10) * 1000;
  return null;
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–ª—é—á=–∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª .env.
 * –ó–Ω–∞—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –±–µ–∑ –∫–∞–≤—ã—á–µ–∫.
 * @param key –ö–ª—é—á –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @param value –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
 * @returns true –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, false –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
 */
function updateEnvKey(key: string, value: string): boolean {
  const envPath = '.env';

  try {
    // –®–∞–≥ 1: –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª
    let content = '';
    try {
      content = fs.readFileSync(envPath, 'utf-8');
    } catch (readError) {
      // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∫–∞–∫ Error
      if (readError instanceof Error) {
        console.log(
          `[DEBUG updateEnvKey] –§–∞–π–ª .env –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è:`,
          readError.message
        );
      } else {
        console.log(
          `[DEBUG updateEnvKey] –§–∞–π–ª .env –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞`
        );
      }
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø—É—Å—Ç—ã–º content
    }

    // –®–∞–≥ 2: –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    let updatedContent = '';
    const lines = content.split('\n');
    let keyFound = false;

    for (const line of lines) {
      if (line.trim().startsWith(`${key}=`)) {
        // –ó–∞–º–µ–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–ª—é—á–æ–º
        updatedContent += `${key}=${value}\n`;
        keyFound = true;
      } else {
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        updatedContent += line + '\n';
      }
    }

    if (!keyFound) {
      // –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫–æ–Ω–µ—Ü
      if (updatedContent && !updatedContent.endsWith('\n')) {
        updatedContent += '\n';
      }
      updatedContent += `${key}=${value}\n`;
    }

    // –®–∞–≥ 3: –ó–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª
    fs.writeFileSync(envPath, updatedContent, 'utf-8');

    // –Ø–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
    return true;
  } catch (error) {
    // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∫–∞–∫ Error
    if (error instanceof Error) {
      console.error(
        `[ERROR updateEnvKey] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ${key} –≤ .env:`,
        error.message
      );
    } else {
      console.error(
        `[ERROR updateEnvKey] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ${key} –≤ .env: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞`
      );
    }
    // –Ø–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false
    return false;
  }
}

export async function initTelegram(config: Config): Promise<TelegramClient> {
  const { API_ID, API_HASH, SESSION_STRING } = config;
  const session = new StringSession(SESSION_STRING || '');
  const client = new TelegramClient(session, API_ID, API_HASH, {
    connectionRetries: 5,
  });

  if (SESSION_STRING) {
    // Headless mode: –ü—Ä–æ—Å—Ç–æ connect, –±–µ–∑ start callbacks
    await withRetries(
      async () => {
        await client.connect();
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        const me = await client.getMe();
        if (!me) throw new Error('–°–µ—Å—Å–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è');
        logApp('‚úÖ Headless: –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–µ–π');
      },
      {
        retries: 3,
        baseDelayMs: 2000,
        maxDelayMs: 20_000,
        onError: (err, attempt) =>
          logApp(
            `[–ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1}] –û—à–∏–±–∫–∞ connect –≤ headless: ${(err as Error).message}`
          ),
        shouldRetry: (err) =>
          /TIMEOUT|ECONN|FLOOD/i.test((err as Error)?.message || ''),
      }
    );
  } else {
    // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π mode –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏
    logApp('‚ö†Ô∏è SESSION_STRING –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –∑–∞–ø—É—Å–∫–∞—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
    const rl = createRl();
    await withRetries(
      async () => {
        await client.start({
          phoneNumber: async () => ask(rl, 'üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: '),
          password: async () => ask(rl, 'üîë 2FA –ø–∞—Ä–æ–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å): '),
          phoneCode: async () => ask(rl, 'üì© –ö–æ–¥ –∏–∑ Telegram: '),
          onError: (err) => logApp(`[–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞] ${(err as Error).message}`),
        });
      },
      {
        retries: 3,
        baseDelayMs: 2000,
        maxDelayMs: 20_000,
        onError: (err, attempt) =>
          logApp(
            `[–ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1}] –û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞ Telegram: ${(err as Error).message}`
          ),
        shouldRetry: (err) =>
          !/AUTH_KEY_DUPLICATED|PHONE_MIGRATE|PHONE_NUMBER_INVALID/i.test(
            (err as Error)?.message || ''
          ),
      }
    ).finally(() => rl.close());

    logApp('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ Telegram');
    const sessionStr = session.save();
    if (updateEnvKey('SESSION_STRING', sessionStr)) {
      logApp('üîê SESSION_STRING —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ .env');
    } else {
      logApp(
        '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å SESSION_STRING –≤ .env ‚Äî —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é:'
      );
      console.log(sessionStr);
    }
  }

  return client;
}

export async function ensureConnected(client: TelegramClient) {
  if (!client.connected) {
    logApp('üîå –ö–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω ‚Äî –ø–æ–¥–∫–ª—é—á–∞—é—Å—å‚Ä¶');
    await withRetries(() => client.connect(), {
      retries: 5,
      baseDelayMs: 1500,
      maxDelayMs: 30_000,
      onError: (err, attempt) =>
        logApp(
          `[–ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1}] –û—à–∏–±–∫–∞ connect(): ${(err as Error).message}`
        ),
    });
    logApp('‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω');
  }
}

export async function updateBio(
  client: TelegramClient,
  text: string,
  retryCfg: any
) {
  await withRetries(
    async () => {
      await ensureConnected(client);
      await client.invoke(new Api.account.UpdateProfile({ about: text }));
    },
    {
      ...retryCfg,
      onError: (err, attempt) => {
        const wait = parseFloodWait(err);
        if (wait) {
          logApp(
            `‚è≥ FLOOD_WAIT: –∂–¥—ë–º ${Math.ceil(wait / 1000)}—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º (–ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1})`
          );
        } else {
          logApp(
            `[–ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1}] –û—à–∏–±–∫–∞ UpdateProfile: ${(err as Error).message}`
          );
        }
      },
      shouldRetry: (err) => {
        if (parseFloodWait(err)) return true;
        const msg = `${(err as Error)?.message || ''}`;
        if (/TIMEOUT|ECONN|FLOOD|RPC_CALL_FAIL|PHONE_MIGRATE/i.test(msg))
          return true;
        return false;
      },
      beforeRetry: async (err) => {
        const wait = parseFloodWait(err);
        if (wait) await new Promise((r) => setTimeout(r, wait));
        try {
          await ensureConnected(client);
        } catch {}
      },
    }
  );
  logApp(`[‚úîÔ∏è] Bio –æ–±–Ω–æ–≤–ª–µ–Ω–æ: "${text}"`);
}
