// src/lib/weather.ts
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π fetch –≤ Node.js >= 18
import { logWeather, logError } from './logger.js';
import { withRetries } from './retry.js';
import { formatStamp } from './time.js';
import type { Config } from '../config/env.js'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø

// –ü—Ä–æ—Å—Ç–æ–π emoji-–º–∞–ø
function getWeatherEmoji(main: string | undefined): string {
  const map: { [key: string]: string } = {
    Thunderstorm: '‚õàÔ∏è',
    Drizzle: 'üåßÔ∏è',
    Rain: 'üå¶Ô∏è',
    Snow: '‚ùÑÔ∏è',
    Clear: '‚òÄÔ∏è',
    Clouds: '‚òÅÔ∏è',
    Mist: 'üå´Ô∏è',
    Fog: 'üå´Ô∏è',
    Haze: 'üå´Ô∏è',
    Dust: 'üí®',
    Smoke: 'üí®',
    Sand: 'üí®',
    Squall: 'üå¨Ô∏è',
    Tornado: 'üå™Ô∏è',
  };
  return map[main || ''] || 'üå§Ô∏è';
}

// –¢–∏–ø –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–≥–æ–¥—ã –∏–∑ API
interface WeatherData {
  dt: number;
  temp: number;
  weather?: { main: string }[];
}

// –¢–∏–ø –¥–ª—è –∫—ç—à–∞
interface WeatherCache {
  at: number;
  hourly: WeatherData[] | null;
  fallback: string | null;
}

// –ö—ç—à–∏—Ä—É–µ–º –Ω–µ —Å—Ç—Ä–æ–∫—É, –∞ –≤–µ—Å—å hourly-–º–∞—Å—Å–∏–≤
let cache: WeatherCache = { at: 0, hourly: null, fallback: null };

// –í—ã–±—Ä–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–π –∫ —Ç–µ–∫—É—â–µ–º—É –º–æ–º–µ–Ω—Ç—É –ø—Ä–æ–≥–Ω–æ–∑
function pickNearestHourly(hourly: WeatherData[]): WeatherData | null {
  if (!hourly || hourly.length === 0) return null;
  const nowSec = Math.floor(Date.now() / 1000);
  // –ù–∞–π—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–∑–Ω–∏—Ü–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  let chosen = hourly[0];
  let minDiff = Math.abs(chosen.dt - nowSec);
  for (let i = 1; i < hourly.length; i++) {
    const diff = Math.abs(hourly[i].dt - nowSec);
    if (diff < minDiff) {
      minDiff = diff;
      chosen = hourly[i];
    }
  }
  return chosen;
}

export async function getWeatherCached(config: Config): Promise<string> {
  const now = Date.now();
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
  if (cache.hourly && now - cache.at < config.WEATHER_CACHE_MS) {
    const h = pickNearestHourly(cache.hourly);
    const out = h
      ? `${getWeatherEmoji(h.weather?.[0]?.main)}${Math.round(h.temp)}¬∞C`
      : cache.fallback || 'üåç?';
    logWeather(`‚ôªÔ∏è –ü–æ–≥–æ–¥–∞ –∏–∑ –∫—ç—à–∞ (${formatStamp()}): ${out}`);
    return out;
  }

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–æ–ª–µ–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
  const {
    LAT,
    LON,
    OPENWEATHER_API_KEY,
    WEATHER_TIMEOUT_MS: weatherTimeoutMs,
    retry,
  } = config;
  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω URL: —É–±—Ä–∞–Ω—ã –ø—Ä–æ–±–µ–ª—ã
  const url = `https://api.openweathermap.org/data/3.0/onecall?lat=${LAT}&lon=${LON}&exclude=current,minutely,daily,alerts&appid=${OPENWEATHER_API_KEY}&units=metric&lang=ru`;

  try {
    const data = await withRetries(
      async () => {
        const controller = new AbortController();
        const timeout = setTimeout(() => controller.abort(), weatherTimeoutMs);

        logWeather(
          `üì° –ó–∞–ø—Ä–æ—Å hourly: ${url.replace(OPENWEATHER_API_KEY, '***')}`
        );
        try {
          const res = await fetch(url, { signal: controller.signal });
          logWeather(`üì° –°—Ç–∞—Ç—É—Å: ${res.status} ${res.statusText}`);
          if (!res.ok) {
            const text = await res.text();
            throw new Error(`HTTP ${res.status}: ${text}`);
          }
          return (await res.json()) as { hourly: WeatherData[] };
        } catch (err) {
          logError('[–ü–æ–≥–æ–¥–∞] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞', err);
          throw err;
        } finally {
          clearTimeout(timeout);
        }
      },
      {
        ...retry, // –ò—Å–ø–æ–ª—å–∑—É–µ–º retry –∫–æ–Ω—Ñ–∏–≥ –∏–∑ config
        onError: (err, attempt) =>
          logWeather(
            `[–ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1}] –û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã: ${(err && (err as Error).message) || String(err)}`
          ),
        shouldRetry: (err) => {
          const msg = `${(err as Error)?.name || ''} ${(err as Error)?.message || ''}`;
          if (/aborted/i.test(msg)) return true;
          if (/ECONN|ENOTFOUND|EAI_AGAIN|ECONNRESET/i.test(msg)) return true;
          if (/HTTP\s(5\d\d)/.test(msg)) return true;
          if (/HTTP\s429/.test(msg)) return true;
          return false;
        },
      }
    );

    if (!data.hourly?.length) {
      throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö hourly');
    }

    cache = { at: Date.now(), hourly: data.hourly, fallback: cache.fallback };
    const h = pickNearestHourly(data.hourly);
    const result = h
      ? `${getWeatherEmoji(h.weather?.[0]?.main)}${Math.round(h.temp)}¬∞C`
      : 'üåç?';
    cache.fallback = result; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ fallback

    logWeather(`‚úÖ Hourly (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ –≤ ${formatStamp()}): ${result}`);
    return result;
  } catch (error) {
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∏ –µ—Å—Ç—å fallback, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (cache.fallback) {
      logWeather(
        `‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã, –∏—Å–ø–æ–ª—å–∑—É—é fallback: ${cache.fallback}`
      );
      return cache.fallback;
    }
    // –ï—Å–ª–∏ fallback'–∞ –Ω–µ—Ç, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    throw error;
  }
}
